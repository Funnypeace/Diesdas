<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üèÉ\u200d‚ôÇÔ∏è Endless Runner - Minispiel</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Poppins', sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            padding: 2rem;
            animation: backgroundShift 10s ease-in-out infinite;
        }

        @keyframes backgroundShift {
            0%, 100% { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); }
            50% { background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%); }
        }

        .game-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            width: 100%;
            max-width: 900px;
        }

        .game-header {
            text-align: center;
            margin-bottom: 2rem;
            animation: fadeInDown 0.8s ease-out;
        }

        @keyframes fadeInDown {
            from { transform: translateY(-50px); opacity: 0; }
            to { transform: translateY(0); opacity: 1; }
        }

        .game-title {
            font-size: 3rem;
            font-weight: 700;
            color: white;
            margin-bottom: 1rem;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
            animation: bounce 2s ease-in-out infinite;
        }

        @keyframes bounce {
            0%, 20%, 50%, 80%, 100% { transform: translateY(0); }
            40% { transform: translateY(-10px); }
            60% { transform: translateY(-5px); }
        }

        .score-container {
            display: flex;
            gap: 1rem;
            justify-content: center;
            align-items: center;
            flex-wrap: wrap;
        }

        .score-badge, .high-score-badge {
            font-size: 1.1rem;
            padding: 0.5rem 1rem;
            font-weight: 600;
            border-radius: 20px;
            color: white;
            border: none;
            transition: all 0.3s ease;
        }

        .score-badge {
            background: linear-gradient(135deg, #4F46E5, #7C3AED);
            animation: pulse 2s ease-in-out infinite;
        }

        .high-score-badge {
            background: linear-gradient(135deg, #F59E0B, #EF4444);
        }

        @keyframes pulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.05); }
        }

        .game-card {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border: 2px solid rgba(255, 255, 255, 0.2);
            border-radius: 20px;
            padding: 2rem;
            box-shadow: 0 20px 40px rgba(0,0,0,0.15);
            animation: slideInUp 0.8s ease-out;
            max-width: 100%;
            overflow: hidden;
        }

        @keyframes slideInUp {
            from { transform: translateY(50px); opacity: 0; }
            to { transform: translateY(0); opacity: 1; }
        }

        .game-canvas {
            display: block;
            margin: 0 auto;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
            border: 3px solid #E5E7EB;
            border-radius: 12px;
            background: linear-gradient(180deg, #87CEEB 0%, #98FB98 100%);
        }

        .game-canvas:hover {
            transform: translateY(-2px);
            box-shadow: 0 15px 40px rgba(0,0,0,0.25);
        }

        .game-controls {
            text-align: center;
            margin-top: 2rem;
            min-height: 120px;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
        }

        .game-instructions h2, .game-over h2 {
            font-size: 2rem;
            margin-bottom: 1rem;
            color: #374151;
            font-weight: 600;
        }

        .game-instructions p, .game-over p {
            font-size: 1.1rem;
            color: #6B7280;
            margin-bottom: 1.5rem;
        }

        .start-button, .restart-button {
            background: linear-gradient(135deg, #10B981, #059669);
            color: white;
            border: none;
            padding: 1rem 2rem;
            font-size: 1.2rem;
            font-weight: 600;
            border-radius: 50px;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 5px 15px rgba(16, 185, 129, 0.3);
        }

        .start-button:hover, .restart-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(16, 185, 129, 0.4);
            background: linear-gradient(135deg, #059669, #047857);
        }

        .controls-hint {
            font-size: 1rem;
            color: #6B7280;
            animation: fadeInOut 2s ease-in-out infinite;
        }

        @keyframes fadeInOut {
            0%, 100% { opacity: 0.7; }
            50% { opacity: 1; }
        }

        .new-record {
            font-size: 1.3rem;
            color: #F59E0B;
            font-weight: 600;
            margin: 1rem 0;
            animation: celebration 1s ease-in-out infinite;
        }

        @keyframes celebration {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.1); }
        }

        .game-tips {
            margin-top: 2rem;
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 15px;
            padding: 1.5rem;
            color: white;
            max-width: 600px;
            animation: fadeIn 1s ease-out 0.5s both;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .game-tips h3 {
            font-size: 1.3rem;
            margin-bottom: 1rem;
            color: #F9FAFB;
        }

        .game-tips ul {
            list-style: none;
            padding: 0;
        }

        .game-tips li {
            padding: 0.5rem 0;
            font-size: 1rem;
            color: #E5E7EB;
            position: relative;
            padding-left: 1.5rem;
        }

        .game-tips li:before {
            content: "‚Ä¢";
            color: #10B981;
            font-weight: bold;
            position: absolute;
            left: 0;
        }

        kbd {
            background: #374151;
            color: white;
            padding: 0.2rem 0.5rem;
            border-radius: 5px;
            font-family: monospace;
            font-size: 0.9rem;
            border: 1px solid #4B5563;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .hidden {
            display: none;
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            body {
                padding: 1rem;
            }
            
            .game-title {
                font-size: 2.5rem;
            }
            
            .game-canvas {
                max-width: 100%;
                height: auto;
            }
            
            .score-container {
                flex-direction: column;
                gap: 0.5rem;
            }
            
            .game-card {
                padding: 1rem;
            }
        }

        @media (max-width: 480px) {
            .game-title {
                font-size: 2rem;
            }
            
            .game-instructions h2, .game-over h2 {
                font-size: 1.5rem;
            }
            
            .start-button, .restart-button {
                padding: 0.8rem 1.5rem;
                font-size: 1rem;
            }
        }
    </style>
</head>
<body>
    <div class="game-container">
        <div class="game-header">
            <h1 class="game-title">üèÉ\u200d‚ôÇÔ∏è Endless Runner</h1>
            <div class="score-container">
                <div class="score-badge">Score: <span id="currentScore">0</span></div>
                <div class="high-score-badge">Best: <span id="highScore">0</span></div>
            </div>
        </div>

        <div class="game-card">
            <canvas id="gameCanvas" class="game-canvas" width="800" height="400"></canvas>
            
            <div class="game-controls">
                <div id="startScreen" class="game-instructions">
                    <h2>üéÆ Ready to Run?</h2>
                    <p>Press <kbd>SPACE</kbd> or click to jump over obstacles!</p>
                    <button id="startButton" class="start-button">Start Game</button>
                </div>
                
                <div id="playingScreen" class="game-playing hidden">
                    <p class="controls-hint">
                        Press <kbd>SPACE</kbd> or click to jump!
                    </p>
                </div>
                
                <div id="gameOverScreen" class="game-over hidden">
                    <h2>üí• Game Over!</h2>
                    <p>Final Score: <strong id="finalScore">0</strong></p>
                    <p id="newRecordMessage" class="new-record hidden">üèÜ New High Score!</p>
                    <button id="restartButton" class="restart-button">Play Again</button>
                </div>
            </div>
        </div>
        
        <div class="game-tips">
            <h3>üí° Tips:</h3>
            <ul>
                <li>Time your jumps carefully to avoid the red obstacles</li>
                <li>The game gets faster as your score increases</li>
                <li>Try to beat your high score!</li>
            </ul>
        </div>
    </div>

    <script>
        class EndlessRunnerGame {
            constructor() {
                this.canvas = document.getElementById('gameCanvas');
                this.ctx = this.canvas.getContext('2d');
                this.gameState = 'start'; // 'start', 'playing', 'gameOver'
                this.score = 0;
                this.highScore = localStorage.getItem('highScore') || 0;
                this.animationId = null;
                
                // Game configuration
                this.config = {
                    canvas: {
                        width: 800,
                        height: 400
                    },
                    player: {
                        x: 100,
                        y: 250,
                        width: 40,
                        height: 40,
                        velocityY: 0,
                        jumpPower: -12,
                        gravity: 0.6,
                        grounded: false,
                        color: '#4F46E5'
                    },
                    obstacles: [],
                    background: {
                        x: 0,
                        speed: 3
                    },
                    ground: {
                        height: 80,
                        color: '#22C55E'
                    },
                    sky: {
                        color: '#87CEEB'
                    }
                };

                // Initialize game
                this.init();
            }

            init() {
                this.canvas.width = this.config.canvas.width;
                this.canvas.height = this.config.canvas.height;
                
                // Reset game state
                this.obstacles = [];
                this.obstacleTimer = 0;
                this.gameSpeed = 3;
                this.scoreTimer = 0;
                this.player = { ...this.config.player };
                this.background = { ...this.config.background };
                
                // Update UI
                this.updateUI();
                this.bindEvents();
            }

            bindEvents() {
                // Keyboard events
                document.addEventListener('keydown', (e) => {
                    if (e.code === 'Space') {
                        e.preventDefault();
                        this.handleJump();
                    }
                });

                // Mouse events
                this.canvas.addEventListener('click', () => {
                    this.handleJump();
                });

                // Button events
                document.getElementById('startButton').addEventListener('click', () => {
                    this.startGame();
                });

                document.getElementById('restartButton').addEventListener('click', () => {
                    this.resetGame();
                });
            }

            handleJump() {
                if (this.gameState === 'start') {
                    this.startGame();
                } else if (this.gameState === 'playing') {
                    this.jump();
                } else if (this.gameState === 'gameOver') {
                    this.resetGame();
                }
            }

            startGame() {
                this.gameState = 'playing';
                this.score = 0;
                this.obstacles = [];
                this.obstacleTimer = 0;
                this.gameSpeed = 3;
                this.scoreTimer = 0;
                this.player.y = 250;
                this.player.velocityY = 0;
                this.player.grounded = false;
                this.background.x = 0;
                
                this.updateUI();
                this.gameLoop();
            }

            jump() {
                const groundY = this.config.canvas.height - this.config.ground.height - this.player.height;
                
                if (this.player.y >= groundY - 5) {
                    this.player.velocityY = this.player.jumpPower;
                    this.player.grounded = false;
                }
            }

            resetGame() {
                this.gameState = 'start';
                if (this.animationId) {
                    cancelAnimationFrame(this.animationId);
                }
                this.init();
            }

            gameLoop() {
                this.update();
                this.draw();
                
                if (this.gameState === 'playing') {
                    this.animationId = requestAnimationFrame(() => this.gameLoop());
                }
            }

            update() {
                // Update player physics
                this.player.velocityY += this.player.gravity;
                this.player.y += this.player.velocityY;

                // Ground collision
                const groundY = this.config.canvas.height - this.config.ground.height - this.player.height;
                if (this.player.y >= groundY) {
                    this.player.y = groundY;
                    this.player.velocityY = 0;
                    this.player.grounded = true;
                }

                // Update background
                this.background.x -= this.gameSpeed;
                if (this.background.x <= -this.config.canvas.width) {
                    this.background.x = 0;
                }

                // Spawn obstacles
                this.obstacleTimer++;
                if (this.obstacleTimer > 120 - this.gameSpeed * 5) {
                    this.obstacles.push({
                        x: this.config.canvas.width,
                        y: this.config.canvas.height - this.config.ground.height - 60,
                        width: 30,
                        height: 60,
                        color: '#DC2626'
                    });
                    this.obstacleTimer = 0;
                }

                // Update obstacles
                this.obstacles = this.obstacles.filter(obstacle => {
                    obstacle.x -= this.gameSpeed;
                    
                    // Check collision
                    if (obstacle.x < this.player.x + this.player.width &&
                        obstacle.x + obstacle.width > this.player.x &&
                        obstacle.y < this.player.y + this.player.height &&
                        obstacle.y + obstacle.height > this.player.y) {
                        // Game over
                        this.gameOver();
                        return false;
                    }
                    
                    return obstacle.x > -obstacle.width;
                });

                // Update score
                this.scoreTimer++;
                if (this.scoreTimer > 10) {
                    this.score++;
                    this.scoreTimer = 0;
                    document.getElementById('currentScore').textContent = this.score;
                }

                // Increase difficulty
                if (this.score > 0 && this.score % 100 === 0) {
                    this.gameSpeed = Math.min(this.gameSpeed + 0.1, 8);
                }
            }

            draw() {
                // Clear canvas
                this.ctx.clearRect(0, 0, this.config.canvas.width, this.config.canvas.height);
                
                // Draw sky
                this.ctx.fillStyle = this.config.sky.color;
                this.ctx.fillRect(0, 0, this.config.canvas.width, this.config.canvas.height - this.config.ground.height);
                
                // Draw clouds (moving background)
                this.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';
                for (let i = 0; i < 5; i++) {
                    const cloudX = (this.background.x + i * 200) % (this.config.canvas.width + 100);
                    this.drawCloud(cloudX, 50 + i * 20);
                }
                
                // Draw ground
                this.ctx.fillStyle = this.config.ground.color;
                this.ctx.fillRect(0, this.config.canvas.height - this.config.ground.height, this.config.canvas.width, this.config.ground.height);
                
                // Draw ground pattern
                this.ctx.fillStyle = '#16A34A';
                for (let i = 0; i < this.config.canvas.width; i += 20) {
                    this.ctx.fillRect(i, this.config.canvas.height - this.config.ground.height, 10, 10);
                }
                
                // Draw player
                this.ctx.fillStyle = this.player.color;
                this.ctx.fillRect(this.player.x, this.player.y, this.player.width, this.player.height);
                
                // Draw player details
                this.ctx.fillStyle = 'white';
                this.ctx.fillRect(this.player.x + 8, this.player.y + 8, 8, 8); // Eye
                this.ctx.fillRect(this.player.x + 24, this.player.y + 8, 8, 8); // Eye
                
                // Draw obstacles
                this.obstacles.forEach(obstacle => {
                    this.ctx.fillStyle = obstacle.color;
                    this.ctx.fillRect(obstacle.x, obstacle.y, obstacle.width, obstacle.height);
                    
                    // Add some detail to obstacles
                    this.ctx.fillStyle = '#991B1B';
                    this.ctx.fillRect(obstacle.x + 5, obstacle.y + 5, obstacle.width - 10, obstacle.height - 10);
                });
            }

            drawCloud(x, y) {
                this.ctx.beginPath();
                this.ctx.arc(x, y, 20, 0, 2 * Math.PI);
                this.ctx.arc(x + 20, y, 30, 0, 2 * Math.PI);
                this.ctx.arc(x + 40, y, 20, 0, 2 * Math.PI);
                this.ctx.fill();
            }

            gameOver() {
                this.gameState = 'gameOver';
                
                // Update high score
                if (this.score > this.highScore) {
                    this.highScore = this.score;
                    localStorage.setItem('highScore', this.highScore);
                    document.getElementById('newRecordMessage').classList.remove('hidden');
                } else {
                    document.getElementById('newRecordMessage').classList.add('hidden');
                }
                
                this.updateUI();
            }

            updateUI() {
                document.getElementById('currentScore').textContent = this.score;
                document.getElementById('highScore').textContent = this.highScore;
                document.getElementById('finalScore').textContent = this.score;
                
                // Show/hide screens
                document.getElementById('startScreen').classList.toggle('hidden', this.gameState !== 'start');
                document.getElementById('playingScreen').classList.toggle('hidden', this.gameState !== 'playing');
                document.getElementById('gameOverScreen').classList.toggle('hidden', this.gameState !== 'gameOver');
            }
        }

        // Initialize game when page loads
        document.addEventListener('DOMContentLoaded', () => {
            new EndlessRunnerGame();
        });
    </script>
</body>
</html>
